def generate_step(step)
  return unless step.complete?
  comment = "\n# Step #{step.order}: #{helpers.escape_javascript helpers.get_comment(step)}"

  command = case step.action_type
    when 'pageload'
      "driver.get '#{helpers.escape_javascript step.webpage}'"
    when 'scroll'
      "driver.execute_script 'scroll(#{step.scrollLeft}, #{step.scrollTop})'"
    when 'keypress'
      "driver.action.send_keys('#{helpers.escape_javascript step.typed}').perform"
    when 'resize'
      "driver.manage.window.resize_to(#{step.screenwidth}, #{step.screenheight})"
    when 'click'
      type = step.selector[:selectorType]
      selector = helpers.escape_javascript step.selector[:selector].strip
      eq = step.selector[:eq].to_i
      case type # first, find DOM with WebDriver
        when 'id'
          "driver.find_element(:id, '#{selector}')"
        when 'class'
          if selector.include? ' '
            selector = ".#{selector.split.join('.')}"
            "driver.find_elements(:css => '#{selector}')[#{eq}]"
          else # 1 single class
            "driver.find_elements(:class => '#{selector}')[#{eq}]"
          end
        when 'tag'
          "driver.find_elements(:tag_name => '#{selector}')[#{eq}]"
        when 'name'
          "driver.find_elements(:name => '#{selector}')[#{eq}]"
        when 'partialLink' # link text
          "driver.find_elements(:partial_link_text => '#{selector}')[#{eq}]"
        when 'href'
          "driver.find_elements(:css => \"a[href='#{selector}']\")[#{eq}]"
        when 'partialHref'
          "driver.find_elements(:css => \"a[href*='#{selector}']\")[#{eq}]"
        when 'button' # use XPath
          "driver.find_elements(:xpath, \"//button[contains(.,'#{selector}')]\")[#{eq}]"
        when 'css'
          if eq > 0
            "driver.find_elements(:css => '#{selector}')[#{eq}]"
          else
            "driver.find_element(:css, '#{selector}')"
          end
        when 'coordination'
          "elem = driver.find_elements(:tag_name => 'body').first"
          "driver.action.move_to(elem, #{step.selector[:x]}, #{step.selector[:y]}).click.perform"
        else
          nil
      end
    else
      true
    end

  "\n#{comment}\n#{command}"
end

def get_test_code(test)
  test.steps.inject('') { |code_so_far, step|
    cmd = generate_step(step)
    "#{code_so_far}\n\n#{cmd}"
  }
end

first_step = Step.where(test: test).first
resize_cmd = "driver.manage.window.resize_to(#{first_step.screenwidth}, #{first_step.screenheight})" if first_step.screenwidth

pre_tests_code = if @test.suite.prep_tests.count > 0
                    code = @test.suite.prep_tests.inject('') { |code_so_far, sub_test|
                      test_code = get_test_code(sub_test)
                      "#{code_so_far}\n\n#{test_code}"
                    }
                    "# suite's pre-tests\n\n#{code}"
                  end

code = get_test_code(test)

"=begin
Default Template
Generated by UIChecks.com
Test title: #{test.title}
Language: #{lang.capitalize}
=end

require 'selenium-webdriver'
driver = Selenium::WebDriver.for :chrome

#{resize_cmd}
#{pre_tests_code}
#{code}

driver.quit
"